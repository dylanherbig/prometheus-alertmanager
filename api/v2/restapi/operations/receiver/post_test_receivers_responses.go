// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package receiver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostTestReceiversOKCode is the HTTP code returned for type PostTestReceiversOK
const PostTestReceiversOKCode int = 200

/*
PostTestReceiversOK Successfully tested all receivers

swagger:response postTestReceiversOK
*/
type PostTestReceiversOK struct {
}

// NewPostTestReceiversOK creates PostTestReceiversOK with default headers values
func NewPostTestReceiversOK() *PostTestReceiversOK {

	return &PostTestReceiversOK{}
}

// WriteResponse to the client
func (o *PostTestReceiversOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostTestReceiversBadRequestCode is the HTTP code returned for type PostTestReceiversBadRequest
const PostTestReceiversBadRequestCode int = 400

/*
PostTestReceiversBadRequest Bad request

swagger:response postTestReceiversBadRequest
*/
type PostTestReceiversBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostTestReceiversBadRequest creates PostTestReceiversBadRequest with default headers values
func NewPostTestReceiversBadRequest() *PostTestReceiversBadRequest {

	return &PostTestReceiversBadRequest{}
}

// WithPayload adds the payload to the post test receivers bad request response
func (o *PostTestReceiversBadRequest) WithPayload(payload string) *PostTestReceiversBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post test receivers bad request response
func (o *PostTestReceiversBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTestReceiversBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostTestReceiversInternalServerErrorCode is the HTTP code returned for type PostTestReceiversInternalServerError
const PostTestReceiversInternalServerErrorCode int = 500

/*
PostTestReceiversInternalServerError Internal server error

swagger:response postTestReceiversInternalServerError
*/
type PostTestReceiversInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostTestReceiversInternalServerError creates PostTestReceiversInternalServerError with default headers values
func NewPostTestReceiversInternalServerError() *PostTestReceiversInternalServerError {

	return &PostTestReceiversInternalServerError{}
}

// WithPayload adds the payload to the post test receivers internal server error response
func (o *PostTestReceiversInternalServerError) WithPayload(payload string) *PostTestReceiversInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post test receivers internal server error response
func (o *PostTestReceiversInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTestReceiversInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
