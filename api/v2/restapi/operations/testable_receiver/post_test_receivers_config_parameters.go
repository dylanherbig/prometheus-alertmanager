// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package testable_receiver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
)

// PostTestReceiversConfigMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PostTestReceiversConfigMaxParseMemory int64 = 32 << 20

// NewPostTestReceiversConfigParams creates a new PostTestReceiversConfigParams object
//
// There are no default values defined in the spec.
func NewPostTestReceiversConfigParams() PostTestReceiversConfigParams {

	return PostTestReceiversConfigParams{}
}

// PostTestReceiversConfigParams contains all the bound params for the post test receivers config operation
// typically these are obtained from a http.Request
//
// swagger:parameters postTestReceiversConfig
type PostTestReceiversConfigParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The templates to utilize
	  In: formData
	*/
	Template io.ReadCloser
	/*The configuration file to parse
	  Required: true
	  In: formData
	*/
	TestableReceiversConfig io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostTestReceiversConfigParams() beforehand.
func (o *PostTestReceiversConfigParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PostTestReceiversConfigMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	template, templateHeader, err := r.FormFile("template")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "template", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else if err := o.bindTemplate(template, templateHeader); err != nil {
		res = append(res, err)
	} else {
		o.Template = &runtime.File{Data: template, Header: templateHeader}
	}

	testableReceiversConfig, testableReceiversConfigHeader, err := r.FormFile("testableReceiversConfig")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "testableReceiversConfig", err))
	} else if err := o.bindTestableReceiversConfig(testableReceiversConfig, testableReceiversConfigHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.TestableReceiversConfig = &runtime.File{Data: testableReceiversConfig, Header: testableReceiversConfigHeader}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindTemplate binds file parameter Template.
//
// The only supported validations on files are MinLength and MaxLength
func (o *PostTestReceiversConfigParams) bindTemplate(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindTestableReceiversConfig binds file parameter TestableReceiversConfig.
//
// The only supported validations on files are MinLength and MaxLength
func (o *PostTestReceiversConfigParams) bindTestableReceiversConfig(file multipart.File, header *multipart.FileHeader) error {
	return nil
}
