// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package testable_receiver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostTestReceiversConfigHandlerFunc turns a function with the right signature into a post test receivers config handler
type PostTestReceiversConfigHandlerFunc func(PostTestReceiversConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTestReceiversConfigHandlerFunc) Handle(params PostTestReceiversConfigParams) middleware.Responder {
	return fn(params)
}

// PostTestReceiversConfigHandler interface for that can handle valid post test receivers config params
type PostTestReceiversConfigHandler interface {
	Handle(PostTestReceiversConfigParams) middleware.Responder
}

// NewPostTestReceiversConfig creates a new http.Handler for the post test receivers config operation
func NewPostTestReceiversConfig(ctx *middleware.Context, handler PostTestReceiversConfigHandler) *PostTestReceiversConfig {
	return &PostTestReceiversConfig{Context: ctx, Handler: handler}
}

/*
	PostTestReceiversConfig swagger:route POST /receivers/test/config testableReceiver postTestReceiversConfig

Test all receivers (name of notification integrations) from inserted configuration file
*/
type PostTestReceiversConfig struct {
	Context *middleware.Context
	Handler PostTestReceiversConfigHandler
}

func (o *PostTestReceiversConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostTestReceiversConfigParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostTestReceiversConfigOKBody post test receivers config o k body
//
// swagger:model PostTestReceiversConfigOKBody
type PostTestReceiversConfigOKBody struct {

	// receiver
	Receiver string `json:"receiver,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this post test receivers config o k body
func (o *PostTestReceiversConfigOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post test receivers config o k body based on context it is used
func (o *PostTestReceiversConfigOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTestReceiversConfigOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTestReceiversConfigOKBody) UnmarshalBinary(b []byte) error {
	var res PostTestReceiversConfigOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
