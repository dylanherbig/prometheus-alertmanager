// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package testable_receiver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostTestReceiversConfigParams creates a new PostTestReceiversConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostTestReceiversConfigParams() *PostTestReceiversConfigParams {
	return &PostTestReceiversConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostTestReceiversConfigParamsWithTimeout creates a new PostTestReceiversConfigParams object
// with the ability to set a timeout on a request.
func NewPostTestReceiversConfigParamsWithTimeout(timeout time.Duration) *PostTestReceiversConfigParams {
	return &PostTestReceiversConfigParams{
		timeout: timeout,
	}
}

// NewPostTestReceiversConfigParamsWithContext creates a new PostTestReceiversConfigParams object
// with the ability to set a context for a request.
func NewPostTestReceiversConfigParamsWithContext(ctx context.Context) *PostTestReceiversConfigParams {
	return &PostTestReceiversConfigParams{
		Context: ctx,
	}
}

// NewPostTestReceiversConfigParamsWithHTTPClient creates a new PostTestReceiversConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostTestReceiversConfigParamsWithHTTPClient(client *http.Client) *PostTestReceiversConfigParams {
	return &PostTestReceiversConfigParams{
		HTTPClient: client,
	}
}

/*
PostTestReceiversConfigParams contains all the parameters to send to the API endpoint

	for the post test receivers config operation.

	Typically these are written to a http.Request.
*/
type PostTestReceiversConfigParams struct {

	/* Template.

	   The templates to utilize
	*/
	Template runtime.NamedReadCloser

	/* TestableReceiversConfig.

	   The configuration file to parse
	*/
	TestableReceiversConfig runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post test receivers config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostTestReceiversConfigParams) WithDefaults() *PostTestReceiversConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post test receivers config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostTestReceiversConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post test receivers config params
func (o *PostTestReceiversConfigParams) WithTimeout(timeout time.Duration) *PostTestReceiversConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post test receivers config params
func (o *PostTestReceiversConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post test receivers config params
func (o *PostTestReceiversConfigParams) WithContext(ctx context.Context) *PostTestReceiversConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post test receivers config params
func (o *PostTestReceiversConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post test receivers config params
func (o *PostTestReceiversConfigParams) WithHTTPClient(client *http.Client) *PostTestReceiversConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post test receivers config params
func (o *PostTestReceiversConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTemplate adds the template to the post test receivers config params
func (o *PostTestReceiversConfigParams) WithTemplate(template runtime.NamedReadCloser) *PostTestReceiversConfigParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the post test receivers config params
func (o *PostTestReceiversConfigParams) SetTemplate(template runtime.NamedReadCloser) {
	o.Template = template
}

// WithTestableReceiversConfig adds the testableReceiversConfig to the post test receivers config params
func (o *PostTestReceiversConfigParams) WithTestableReceiversConfig(testableReceiversConfig runtime.NamedReadCloser) *PostTestReceiversConfigParams {
	o.SetTestableReceiversConfig(testableReceiversConfig)
	return o
}

// SetTestableReceiversConfig adds the testableReceiversConfig to the post test receivers config params
func (o *PostTestReceiversConfigParams) SetTestableReceiversConfig(testableReceiversConfig runtime.NamedReadCloser) {
	o.TestableReceiversConfig = testableReceiversConfig
}

// WriteToRequest writes these params to a swagger request
func (o *PostTestReceiversConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Template != nil {

		if o.Template != nil {
			// form file param template
			if err := r.SetFileParam("template", o.Template); err != nil {
				return err
			}
		}
	}
	// form file param testableReceiversConfig
	if err := r.SetFileParam("testableReceiversConfig", o.TestableReceiversConfig); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
