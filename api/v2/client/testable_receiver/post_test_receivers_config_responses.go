// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package testable_receiver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostTestReceiversConfigReader is a Reader for the PostTestReceiversConfig structure.
type PostTestReceiversConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTestReceiversConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostTestReceiversConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostTestReceiversConfigOK creates a PostTestReceiversConfigOK with default headers values
func NewPostTestReceiversConfigOK() *PostTestReceiversConfigOK {
	return &PostTestReceiversConfigOK{}
}

/*
PostTestReceiversConfigOK describes a response with status code 200, with default header values.

Successfully tested all receivers from provided configuration file
*/
type PostTestReceiversConfigOK struct {
	Payload *PostTestReceiversConfigOKBody
}

// IsSuccess returns true when this post test receivers config o k response has a 2xx status code
func (o *PostTestReceiversConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post test receivers config o k response has a 3xx status code
func (o *PostTestReceiversConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post test receivers config o k response has a 4xx status code
func (o *PostTestReceiversConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post test receivers config o k response has a 5xx status code
func (o *PostTestReceiversConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post test receivers config o k response a status code equal to that given
func (o *PostTestReceiversConfigOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostTestReceiversConfigOK) Error() string {
	return fmt.Sprintf("[POST /receivers/test/config][%d] postTestReceiversConfigOK  %+v", 200, o.Payload)
}

func (o *PostTestReceiversConfigOK) String() string {
	return fmt.Sprintf("[POST /receivers/test/config][%d] postTestReceiversConfigOK  %+v", 200, o.Payload)
}

func (o *PostTestReceiversConfigOK) GetPayload() *PostTestReceiversConfigOKBody {
	return o.Payload
}

func (o *PostTestReceiversConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTestReceiversConfigOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostTestReceiversConfigOKBody post test receivers config o k body
swagger:model PostTestReceiversConfigOKBody
*/
type PostTestReceiversConfigOKBody struct {

	// receiver
	Receiver string `json:"receiver,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this post test receivers config o k body
func (o *PostTestReceiversConfigOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post test receivers config o k body based on context it is used
func (o *PostTestReceiversConfigOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTestReceiversConfigOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTestReceiversConfigOKBody) UnmarshalBinary(b []byte) error {
	var res PostTestReceiversConfigOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
